## Problem1
class Solution {

    public int maximalSquare(char[][] matrix) {

        int rows = matrix.length;

        if(rows == 0) return 0;

        int cols = matrix[0].length;

        int [][] dp = new int [rows+1][cols + 1];

        int max = 0;

        for(int i = 1; i <= rows; i++){

            for(int j = 1; j <= cols; j++){

                if(matrix[i-1][j-1] =='1'){

                   dp[i][j] = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;

                    max = Math.max(max, dp[i][j]);

                }

            }

        }

        return max*max;

    }

}

## Problem2

class Solution {

    public int maxSumAfterPartitioning(int[] arr, int k) {

        int n = arr.length;

        int []dp = new int[n];

        dp[0] = arr[0];

        for(int i = 1; i < n; i++){

            int maxInCurrPartition = arr[i];

            for(int j = 1; j <= k && i - j + 1 >= 0; j++){

                maxInCurrPartition = Math.max(maxInCurrPartition, arr[i- j + 1]);

                 int currResult = maxInCurrPartition*j;

                if(i - j >= 0){

                    currResult += dp[i - j];

                } else {

                    currResult += 0;

                }

                dp[i] = Math.max(dp[i], currResult);

            }

        }

        return dp[n-1];

    }

}
